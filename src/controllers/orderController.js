//Qu·∫£n l√≠ ƒë∆°n h√†ng, thanh to√°n, v·∫≠n chuy·ªÉn

const orderService = require("../services/orderService");
const { validationResult } = require("express-validator");

class OrderController {
    async createOrder(req, res) {
        try {
            const { order_items, shipping_address, payment_method, shipping_fee, total_amount } = req.body;
            const user_id = req.user.user_id;

            // Validate ph∆∞∆°ng th·ª©c thanh to√°n
            if (!['cod', 'momo', 'vnpay', 'bank_transfer'].includes(payment_method)) {
                return res.status(400).json({ message: 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá' });
            }

            // Validate c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
            if (!order_items || !shipping_address || !payment_method || !total_amount) {
                return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' });
            }

            // G·ªôp to√†n b·ªô d·ªØ li·ªáu l·∫°i th√†nh 1 object
            const orderData = {
                user_id,
                order_items,
                shipping_address,
                payment_method,
                shipping_fee,
                total_amount
            };

            console.log('üî• orderData g·ª≠i v√†o service:', JSON.stringify(orderData, null, 2));

            const result = await orderService.createOrder(orderData);

            // Tr∆∞·ªùng h·ª£p thanh to√°n online ‚Üí tr·∫£ v·ªÅ URL thanh to√°n
            if (payment_method !== 'cod' && result.payment_url) {
                return res.status(200).json({
                    message: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o, vui l√≤ng thanh to√°n',
                    order_id: result.order_id,
                    payment_url: result.payment_url
                });
            }

            // Tr∆∞·ªùng h·ª£p COD ‚Üí tr·∫£ v·ªÅ th√†nh c√¥ng
            res.status(201).json({
                message: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
                order: result
            });
        } catch (error) {
            console.error('‚ùå L·ªói trong createOrder:', error);
            res.status(500).json({ message: error.message });
        }
    }


    async getOrderDetails(req, res) {
        try {
            const { order_id } = req.params;
            const user_id = req.user.user_id;

            const order = await orderService.getOrderDetails(order_id);

            // Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ thu·ªôc v·ªÅ ng∆∞·ªùi d√πng kh√¥ng
            if (order.user_id !== user_id) {
                return res.status(403).json({
                    success: false,
                    message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒë∆°n h√†ng n√†y",
                });
            }

            res.status(200).json({
                success: true,
                data: order,
            });
        } catch (error) {
            res.status(400).json({
                success: false,
                message: error.message,
            });
        }
    }
    async getUserOrders(req, res) {
        try {
            const user_id = req.user.user_id;

            const orders = await orderService.getUserOrders(user_id);

            res.status(200).json({
                success: true,
                message: "L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng",
                data: orders,
            });
        } catch (error) {
            res.status(400).json({
                success: false,
                message: error.message || "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng",
            });
        }
    }
}

module.exports = new OrderController();
